import random
import json
import sys
sys.path.append("..")
from experiment import Math

W = 6
C1 = "B"
C2 = "C1"
C3 = "C2"
C4 = "L"

C_BOUND = (0.5, 0.5, 0.16)
H_BOUND = (2.0, 2.0, 0.17)
O_BOUND = (4.0, 4.0, 0.33)
L_BOUND = (8.0, 8.0, 0.34)

def generate_dataset(user_num, filename, reverse=False):

    NC = int(user_num * C_BOUND[2])
    NH = int(user_num * H_BOUND[2])
    NO = int(user_num * O_BOUND[2])
    NL = user_num - NC - NH - NO

    length = 0
    users = dict()
    pattern = []
    for i in range(0, NC):
        length = length + 1
        user_id = str(length)
        # w = random.randint(-1, 1)
        bound = random.uniform(C_BOUND[0], C_BOUND[1])
        c = random.choice([C1])
        # users[user_id] = {'bound':bound, 'w':w, 'c':c}
        users[user_id] = {'bound':bound, 'c':c}
        pattern.append(bound)

    for i in range(NH):
        length = length + 1
        user_id = str(length)
        # w = random.randint(-1, 1)
        bound = random.uniform(H_BOUND[0], H_BOUND[1])
        c = random.choice([C1, C2])
        # users[user_id] = {'bound':bound, 'w':w, 'c':c}
        users[user_id] = {'bound':bound, 'c':c}
        pattern.append(bound)

    for i in range(NO):
        length = length + 1
        user_id = str(length)
        # w = random.randint(-1, 1)
        bound = random.uniform(O_BOUND[0], O_BOUND[1])
        c = random.choice([C2, C4])
        # users[user_id] = {'bound':bound, 'w':w, 'c':c}
        users[user_id] = {'bound':bound, 'c':c}
        pattern.append(bound)

    for i in range(NL):
        length = length + 1
        user_id = str(length)
        # w = random.randint(-1, 1)
        bound = random.uniform(L_BOUND[0], L_BOUND[1])
        c = random.choice([C4])
        # users[user_id] = {'bound':bound, 'w':w, 'c':c}
        users[user_id] = {'bound':bound, 'c':c}
        pattern.append(bound)

    pattern = [pattern[i]/max(pattern) for i in range(length)]
    adjusted_pattern = Math.patternSearch(pattern, reverse=reverse)

    users['pattern'] = adjusted_pattern

    string = json.dumps(users)

    with open(filename,'w')as f:
        f.write(string)


def aug_partial_pattern(inputf, outputf, thetaL=1.5, thetaU=10.0):
    f = open(inputf, encoding='utf-8')
    data = json.load(f)
    print(type(data))
    user_num = len(data['pattern'])

    pattern = []

    for i in range(user_num):
        id = str(i + 1)
        bound = data[id]["bound"]
        pattern.append(bound)

    pattern = [pattern[i] / max(pattern) for i in range(user_num)]
    partial_pattern = Math.patternSearch(pattern, thetaL, thetaU)

    data["thetaL"] = thetaL
    data["thetaU"] = thetaU
    data["partial"] = partial_pattern

    string = json.dumps(data)
    with open(outputf,'w')as f:
        f.write(string)
    f.close()


def change_bound(inputf, outputf, pre_bound, new_bound):
    f = open(inputf, encoding='utf-8')
    data = json.load(f)
    user_num = len(data['pattern'])

    pattern = []
    for i in range(user_num):
        if data[str(i+1)]["bound"] == pre_bound:
            data[str(i+1)]["bound"] = new_bound
        pattern.append(data[str(i+1)]["bound"])

    pattern = [pattern[i] / max(pattern) for i in range(length)]
    adjusted_pattern = Math.patternSearch(pattern)
    data['pattern'] = adjusted_pattern

    string = json.dumps(data)

    with open(outputf, 'w')as f:
        f.write(string)
    f.close()


'''The datasets were generated by the following functions.'''

# generate_dataset(200, "200.json")
# aug_partial_pattern("200.json", "200_ptp_thetaL0.5_thetaU10.0.json", 0.5, 10.0)
# aug_partial_pattern("200.json", "200_ptp_thetaL1.0_thetaU10.0.json", 1.0, 10.0)
# aug_partial_pattern("200.json", "200_ptp_thetaL1.5_thetaU10.0.json", 1.5, 10.0)
# aug_partial_pattern("200.json", "200_ptp_thetaL2.0_thetaU10.0.json", 2.0, 10.0)


# change_bound('200.json', '200_maxb7.0.json', 8.0, 7.0)
# change_bound('200.json', '200_maxb8.0.json', 8.0, 8.0)
# change_bound('200.json', '200_maxb9.0.json', 8.0, 9.0)
# change_bound('200.json', '200_maxb10.0.json', 8.0, 10.0)
# change_bound('200.json', '200_minb0.1.json', 0.5, 0.1)
# change_bound('200.json', '200_minb0.5.json', 0.5, 0.5)
# change_bound('200.json', '200_minb1.0.json', 0.5, 1.0)
# change_bound('200.json', '200_minb1.5.json', 0.5, 1.5)

